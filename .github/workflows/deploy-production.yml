name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check required secrets
        env:
          # Deployment secrets
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
          PRODUCTION_PATH: ${{ secrets.PRODUCTION_PATH }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
          # App configuration
          NODE_ENV: ${{ secrets.NODE_ENV }}
          PORT: ${{ secrets.PORT }}
          HOST: ${{ secrets.HOST }}
          # Database configuration
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          # Redis configuration
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          # JWT configuration
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
          JWT_REFRESH_EXPIRES_IN: ${{ secrets.JWT_REFRESH_EXPIRES_IN }}
          # Email configuration
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          EMAIL_SECURE: ${{ secrets.EMAIL_SECURE }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          # App settings
          APP_NAME: ${{ secrets.APP_NAME }}
          APP_URL: ${{ secrets.APP_URL }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          APP_STORE_URL: ${{ secrets.APP_STORE_URL }}
          BCRYPT_ROUNDS: ${{ secrets.BCRYPT_ROUNDS }}
          PASSWORD_RESET_EXPIRES: ${{ secrets.PASSWORD_RESET_EXPIRES }}
          EMAIL_VERIFICATION_EXPIRES: ${{ secrets.EMAIL_VERIFICATION_EXPIRES }}
          # Google and Firebase configuration
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          INVITE_MATCH_WINDOW_SECONDS: ${{ secrets.INVITE_MATCH_WINDOW_SECONDS }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          FIREBASE_SERVICE_ACCOUNT_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
        run: |
          MISSING_SECRETS=()
          
          # Define variables to check
          REQUIRED_VARS=(
            # Deployment
            "PRODUCTION_HOST"
            "PRODUCTION_USER"
            "PRODUCTION_PATH"
            "SSH_PRIVATE_KEY"
            "SSH_PASSPHRASE"
            # App
            "NODE_ENV"
            "PORT"
            "HOST"
            # Database
            "DB_HOST"
            "DB_PORT"
            "DB_NAME"
            "DB_USER"
            "DB_PASSWORD"
            # Redis
            "REDIS_HOST"
            "REDIS_PORT"
            "REDIS_PASSWORD"
            # JWT
            "JWT_SECRET"
            "JWT_EXPIRES_IN"
            "JWT_REFRESH_EXPIRES_IN"
            # Email
            "EMAIL_HOST"
            "EMAIL_PORT"
            "EMAIL_SECURE"
            "EMAIL_USER"
            "EMAIL_PASS"
            "EMAIL_FROM"
            # App settings
            "APP_NAME"
            "APP_URL"
            "FRONTEND_URL"
            "APP_STORE_URL"
            "BCRYPT_ROUNDS"
            "PASSWORD_RESET_EXPIRES"
            "EMAIL_VERIFICATION_EXPIRES"
            # Google and Firebase
            "GOOGLE_CLIENT_ID"
            "INVITE_MATCH_WINDOW_SECONDS"
            "GOOGLE_API_KEY"
            "GEMINI_API_KEY"
            "FIREBASE_SERVICE_ACCOUNT_JSON"
          )
            
          # Check only our required variables
          for var in "${REQUIRED_VARS[@]}"; do
            if [ -z "${!var}" ]; then
              MISSING_SECRETS+=($var)
            fi
          done

          if [ ${#MISSING_SECRETS[@]} -ne 0 ]; then
            echo "❌ Missing required secrets:"
            printf '%s\n' "${MISSING_SECRETS[@]}"
            exit 1
          fi

          echo "✅ All required secrets are set"

  deploy:
    needs: [validate]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build TypeScript
        run: npm run build

      - name: Setup SSH directory
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
          # Write the private key and remove its passphrase
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key_with_pass
          chmod 600 ~/.ssh/deploy_key_with_pass
          # Remove passphrase from the key
          ssh-keygen -p -P "${{ secrets.SSH_PASSPHRASE }}" -N "" -f ~/.ssh/deploy_key_with_pass
          mv ~/.ssh/deploy_key_with_pass ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "SSH directory setup complete"

      - name: Create .env file
        run: |
          cat << EOF > .env
          # Server Configuration
          NODE_ENV=${{ secrets.NODE_ENV }}
          PORT=${{ secrets.PORT }}
          HOST=${{ secrets.HOST }}

          # Database Configuration
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          # Redis Configuration
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}

          # JWT Configuration
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
          JWT_REFRESH_EXPIRES_IN=${{ secrets.JWT_REFRESH_EXPIRES_IN }}

          # Email Configuration
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_SECURE=${{ secrets.EMAIL_SECURE }}
          EMAIL_USER=${{ secrets.EMAIL_USER }}
          EMAIL_PASS=${{ secrets.EMAIL_PASS }}
          EMAIL_FROM=${{ secrets.EMAIL_FROM }}

          # Application Configuration
          APP_NAME=${{ secrets.APP_NAME }}
          APP_URL=${{ secrets.APP_URL }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          APP_STORE_URL=${{ secrets.APP_STORE_URL }}
          BCRYPT_ROUNDS=${{ secrets.BCRYPT_ROUNDS }}
          PASSWORD_RESET_EXPIRES=${{ secrets.PASSWORD_RESET_EXPIRES }}
          EMAIL_VERIFICATION_EXPIRES=${{ secrets.EMAIL_VERIFICATION_EXPIRES }}
          INVITE_MATCH_WINDOW_SECONDS=${{ secrets.INVITE_MATCH_WINDOW_SECONDS }}

          # Google and Firebase Configuration
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          FIREBASE_SERVICE_ACCOUNT_JSON=${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          EOF

      - name: Check and prepare server
        run: |
          # First test SSH connection
          echo "Testing SSH connection..."
          ssh -v -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "sudo -i pwd && sudo -i whoami"

          # Create the check software script
          echo "#!/bin/bash" > check_software.sh
          echo "# Function to check if a command exists" >> check_software.sh
          echo "command_exists() {" >> check_software.sh
          echo "  command -v \"\$1\" >/dev/null 2>&1" >> check_software.sh
          echo "}" >> check_software.sh
          echo "" >> check_software.sh
          echo "# Check and install Node.js" >> check_software.sh
          echo "if command_exists node; then" >> check_software.sh
          echo "  echo \"✅ Node.js is installed (\$(node --version))\"" >> check_software.sh
          echo "else" >> check_software.sh
          echo "  echo \"⚙️ Installing Node.js...\"" >> check_software.sh
          echo "  curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -" >> check_software.sh
          echo "  sudo apt-get install -y nodejs" >> check_software.sh
          echo "  echo \"✅ Node.js installed successfully\"" >> check_software.sh
          echo "fi" >> check_software.sh
          echo "" >> check_software.sh
          echo "# Check and install PM2" >> check_software.sh
          echo "if command_exists pm2; then" >> check_software.sh
          echo "  echo \"✅ PM2 is installed (\$(pm2 --version))\"" >> check_software.sh
          echo "else" >> check_software.sh
          echo "  echo \"⚙️ Installing PM2...\"" >> check_software.sh
          echo "  sudo npm install -g pm2" >> check_software.sh
          echo "  echo \"✅ PM2 installed successfully\"" >> check_software.sh
          echo "  # Setup PM2 startup script" >> check_software.sh
          echo "  sudo pm2 startup" >> check_software.sh
          echo "fi" >> check_software.sh
          
          chmod +x check_software.sh
          scp -v -i ~/.ssh/deploy_key -o IdentitiesOnly=yes check_software.sh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/tmp/
          ssh -v -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "bash /tmp/check_software.sh && rm /tmp/check_software.sh"

          # Create prepare directory script
          echo "#!/bin/bash" > prepare_directory.sh
          echo "DEPLOY_PATH=\"\$1\"" >> prepare_directory.sh
          echo "" >> prepare_directory.sh
          echo "if [ ! -d \"\${DEPLOY_PATH}\" ]; then" >> prepare_directory.sh
          echo "  echo \"Creating deployment directory...\"" >> prepare_directory.sh
          echo "  sudo mkdir -p \"\${DEPLOY_PATH}\"" >> prepare_directory.sh
          echo "  echo \"✅ Deployment directory created\"" >> prepare_directory.sh
          echo "else" >> prepare_directory.sh
          echo "  echo \"✅ Deployment directory already exists\"" >> prepare_directory.sh
          echo "fi" >> prepare_directory.sh
          echo "" >> prepare_directory.sh
          echo "# Set correct ownership and permissions" >> prepare_directory.sh
          echo "sudo chown -R \$(whoami):\$(whoami) \"\${DEPLOY_PATH}\"" >> prepare_directory.sh
          echo "sudo chmod 755 \"\${DEPLOY_PATH}\"" >> prepare_directory.sh
          echo "echo \"✅ Directory permissions set correctly\"" >> prepare_directory.sh
          echo "" >> prepare_directory.sh
          echo "# Create logs directory if it doesn't exist" >> prepare_directory.sh
          echo "if [ ! -d \"\${DEPLOY_PATH}/logs\" ]; then" >> prepare_directory.sh
          echo "  mkdir -p \"\${DEPLOY_PATH}/logs\"" >> prepare_directory.sh
          echo "  echo \"✅ Logs directory created\"" >> prepare_directory.sh
          echo "fi" >> prepare_directory.sh
          
          chmod +x prepare_directory.sh
          scp -v -i ~/.ssh/deploy_key -o IdentitiesOnly=yes prepare_directory.sh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/tmp/
          ssh -v -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "bash /tmp/prepare_directory.sh '${{ secrets.PRODUCTION_PATH }}' && rm /tmp/prepare_directory.sh"

          # Create temporary archive
          tar -czf deploy.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env' \
            --exclude='deploy.tar.gz' \
            .

          # Copy files to server
          scp -v -i ~/.ssh/deploy_key -o IdentitiesOnly=yes \
            deploy.tar.gz \
            .env \
            ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:${{ secrets.PRODUCTION_PATH }}/

          # Execute deployment commands on server
          ssh -v -i ~/.ssh/deploy_key -o IdentitiesOnly=yes ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "bash -c '
            cd ${{ secrets.PRODUCTION_PATH }}
            
            # Backup existing node_modules if it exists
            if [ -d \"node_modules\" ]; then
              echo \"Backing up node_modules...\"
              mv node_modules node_modules_backup
            fi
            
            echo \"Extracting new files...\"
            tar xzf deploy.tar.gz
            rm deploy.tar.gz
            
            # Restore node_modules if backup exists
            if [ -d \"node_modules_backup\" ]; then
              echo \"Restoring node_modules...\"
              rm -rf node_modules
              mv node_modules_backup node_modules
            fi
            
            # Check if npm is available
            if ! command -v npm &> /dev/null; then
              echo \"❌ npm is not installed. Please install Node.js first.\"
              exit 1
            fi
            
            echo \"Installing dependencies...\"
            npm install --production
            
            # Check if PM2 is available
            if ! command -v pm2 &> /dev/null; then
              echo \"❌ PM2 is not installed. Installing globally...\"
              sudo npm install -g pm2
              sudo pm2 startup
            fi
            
            # Check if ecosystem.config.js exists
            if [ ! -f \"ecosystem.config.js\" ]; then
              echo \"❌ ecosystem.config.js not found!\"
              exit 1
            fi
            
            echo \"Managing PM2 process...\"
            if pm2 list | grep -q \"christian-recovery-app\"; then
              echo \"Reloading existing PM2 process...\"
              pm2 reload christian-recovery-app
            else
              echo \"Starting new PM2 process...\"
              pm2 start ecosystem.config.js --env production
            fi
            
            # Save PM2 process list
            pm2 save
            
            echo \"✅ Deployment completed successfully\"
            
            # Display running processes
            echo \"Current PM2 processes:\"
            pm2 list
          '"

      - name: Cleanup
        if: always()
        run: |
          rm -f .env
          rm -f ~/.ssh/deploy_key
          rm -f deploy.tar.gz
